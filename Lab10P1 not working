#include "msp.h"


/**
 * main.c
 */

void systick_init();
void delaymilli(uint16_t delaymS);

void main(void)
{
    int result;

	WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;		// stop watchdog timer

	ADC14->CTL0 |=1; //start a conversion
	while(!ADC14->IFGR0); // wait until conversion complete
	result = ADC14->MEM[5]; // immediately store value in a variable
	printf("Value is:\n\t%d\n", result);
	delaymilli(500); // wait for next value- using Systick function

}
void adcsetup(void)
    {
        ADC14->CTL0 = 0x00000010; //power on and disabled during configuration
        ADC14->CTL0 |= 0x04D80300; // S/H pulse mode, MCLCK, 32 sample clocks,
                                //sw trigger, /4 clock divide
        ADC14->CTL1 = 0x00000030; // 14-bit resolution
        ADC14->MCTL[5] = 0; // A0 input, single ended, vref=avcc
        P5->SEL1 |= 0x20; // configure pin 5.5 for AO
        P5->SEL0 |= 0x20;
        ADC14->CTL1 |= 0x00050000; //start converting at mem reg 5
        ADC14->CTL0 |= 2; //enable ADC after configuration
    }

void systick_init()
{
    /**********************
     * Brief:   initializes the systick timer.
     * Params:
     *          VOID
     * Returns:
     *          VOID
     */
    SysTick->CTRL = 0x00;
    SysTick->LOAD = 0x00FFFFFF;
    SysTick->VAL  = 0x00;
    SysTick->CTRL = 0x00000005;
}

void delaymilli(uint16_t delaymS)
{
    /**********************
     * Brief:   A delay function that uses the systick timer
     *              clocked with the 3 MHz master clock.
     * Params:
     *          uint16_t delaymS:   amount of miliseconds to
     *                                  delay for.
     * Returns:
     *          VOID
     */
    SysTick->LOAD = ((delaymS * 3000)-1);
    SysTick->VAL = 0;
    while((SysTick->CTRL & 0x00010000)==0);
}
